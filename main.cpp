//------------------------------------------------------------------------------
//
//  main.cpp -- new flock experiments
//
//  Created by Craig Reynolds on January 6, 2024.
//  MIT License -- Copyright Â© 2024 Craig Reynolds
//
//------------------------------------------------------------------------------

#define USE_OPEN3D

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// TODO 20240628 can we do an eval of a const tree?
//#define eval_const_20240628
#ifdef eval_const_20240628
#else  // eval_const_20240628
#endif // eval_const_20240628
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#include "EvoFlock.h"

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// TODO 20250820 histogram


int best_fits_histogram()
{
    std::vector<double> bf = {
        0.83961,
        0.863098,
        0.857578,
        0.804429,
        0.83934,
        0.85073,
        0.852054,
        0.850549,
        0.87817,
        0.835135,
        0.850428,
        0.852384,
        0.813333,
        0.810743,
        0.839048,
        0.864992,
        0.845125,
        0.826072,
        0.862092,
        0.85416,
        0.81977,
        0.840367,
        0.818654,
        0.841259,
        0.822173,
        0.817945,
        0.868302,
        0.844011,
        0.817572,
        0.839593,
        0.835494,
    };
    debugPrint(bf.size());
    std::ranges::sort(bf);
    for (auto f : bf) { std::cout << f << std::endl; }
//    double step = 0.02;
    double step = 0.01;
    double bot = 0.78;
    double top = bot + step;
    while (top < 0.92)
    {
        std::cout << bot << ",";
        std::vector<double> here;
        for (auto x : bf) { if (util::between(x, bot, top)) { here.push_back(x); } }
        std::cout << here.size() << "," << util::vec_to_string(here) << std::endl;
        bot += step;
        top += step;
    }
    return EXIT_SUCCESS;
}


//    date and time,run best fit
//    20250817_1805,0.83961
//    20250817_2014,0.863098
//    20250817_2257,0.857578
//    20250818_0633,0.804429
//    20250818_0857,0.83934
//    20250818_1112,0.85073
//    20250818_1321,0.852054
//    20250818_1532,0.850549
//    20250818_1741,0.87817
//    20250818_1951,0.835135
//    20250818_2200,0.850428
//    20250819_0009,0.852384
//    20250819_0218,0.813333
//    20250819_0427,0.810743
//    20250819_0636,0.839048
//    20250819_0848,0.864992
//    20250819_1059,0.845125
//    20250819_1309,0.826072
//    20250819_1519,0.862092
//    20250819_1728,0.85416
//    20250819_1938,0.81977
//    20250819_2150,0.840367
//    20250820_0003,0.818654
//    20250820_0211,0.841259
//    20250820_0419,0.822173
//    20250820_0628,0.817945
//    20250820_0838,0.868302
//    20250820_1047,0.844011
//    20250820_1256,0.817572
//    20250820_1506,0.839593
//    20250820_1717,0.835494


int main(int argc, const char * argv[])
{
    EF::unit_test();

//    EF::runOneFlockEvolution();
    EF::runFlockEvolutionLoop();
//    best_fits_histogram();
    
    delete &Draw::getInstance();
    return EXIT_SUCCESS;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
